<h1>Criando sua reclamação</h1>

<%= form_for(@complaint) do |f| %>
  <% if @complaint.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@complaint.errors.count, "error") %> prohibited this complaint from being saved:</h2>

      <ul>
      <% @complaint.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

	<div class="col-sm-4">
		 <div class="field">
    <%= f.hidden_field :latitude %>
  </div>
  <div class="field">
    <%= f.hidden_field :longitude %>
  </div>
  
  <div class="field">
    <%= f.label :address, "Endereço da reclamação" %><br>
    <%= f.text_field :address %>
  </div>
   <div class="field">
     <%= f.label :category_id, "Escolha uma categoria para sua reclamação" %><br>
    <%= f.collection_select(:category_id, Category.all, :id, :title, prompt: true) %>
  </div>
  <div class="field">
    <%= f.label :title, "Titulo da reclamação" %><br>
    <%= f.text_field :title %>
  </div>
  <div class="field">
    <%= f.label :body,"Descreva detalhadamento o acontecimento" %><br>
    <%= f.text_area :body, cols: 40, rows: 3 %>
  </div>


  <div class="actions">
    <%= f.submit %>
  </div>

	</div>

	<div class="col-sm-8">
		<div id="map" style="height:500px;width:100%;"></div>
	</div>
 
<% end %>

<script type="text/javascript">

	var map
 
    var geocoder 
 
    var marker 



    function initMap() {
      var myLatlng = new google.maps.LatLng(-14.235004,-51.92528);

      map = new google.maps.Map(document.getElementById('map'), {
        center: myLatlng,
        zoom: 4
      });

       geocoder = new google.maps.Geocoder();
 


        checkMap();
       marker = new google.maps.Marker({
          map: map,
          draggable: true,
          animation: google.maps.Animation.DROP
       });



      var pos = {
        lat: localStorage.latitude,
        lng: localStorage.longitude
      };
      marker.setPosition(pos);

	  	google.maps.event.addListener(marker, 'drag', function () {
	  		console.log('drag')
	        geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
	            if (status == google.maps.GeocoderStatus.OK) {
	                    if (results[0]) { 
	                    	console.log(results[0])
	                    $('#complaint_city').val(obterCidade(results[0].address_components))	
	                    $('#complaint_address').val(results[0].formatted_address);
	                    $('#complaint_latitude').val(marker.getPosition().lat());
	                    $('#complaint_longitude').val(marker.getPosition().lng());
	                }
	            }
	        });
	    });

    

	    $('#complaint_address').autocomplete({
        source: function (request, response) {
            geocoder.geocode({ 'address': request.term + ', Brasil', 'region': 'BR' }, function (results, status) {
                response($.map(results, function (item) {
                	city = obterCidade(item.address_components)
                    return {
                        label: item.formatted_address,
                        value: item.formatted_address,
                        city:city,
                        latitude: item.geometry.location.lat(),
                        longitude: item.geometry.location.lng()
                    }
                }));
            })
        },
        select: function (event, ui) {
            $("#complaint_latitude").val(ui.item.latitude);
            $("#complaint_longitude").val(ui.item.longitude);
            var location = new google.maps.LatLng(ui.item.latitude, ui.item.longitude);
            console.log(ui)
            marker.setPosition(location);
            map.setCenter(location);
            map.setZoom(16);
        }
    });



    }


    function loadOnMap(address) {
        geocoder.geocode({ 'address': address + ', Brasil', 'region': 'BR' }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                if (results[0]) {
                    var latitude = results[0].geometry.location.lat();
                    var longitude = results[0].geometry.location.lng();
 
                    $('#complaint_address').val(results[0].formatted_address);
                    $('#complaint_city').val(obterCidade(results[0].address_components))
                    $('#complaint_latitude').val(latitude);
                    $('#complaint_longitude').val(longitude);
 
                    var location = new google.maps.LatLng(latitude, longitude);
                    marker.setPosition(location);
                    map.setCenter(location);
                    map.setZoom(16);
                }
            }
        });
    }

    function obterCidade(arrAddress){
    	var cidade = ''
    	$.each(arrAddress, function (i, address_component) {
		    if (address_component.types[0] == "locality" || address_component.types[0] == "political"){
		        console.log("Cidade: "+address_component.long_name);
		        cidade = address_component.long_name;
		    }
		});
		return cidade;
    }


    $('#buscar').click(function(){
    	var end = $('#complaint_address').val();
    	loadOnMap(end);
    	return false;
    });

    $('#complaint_address').blur(function() {
        if($(this).val() != "")
            loadOnMap($(this).val());
    })

</script>